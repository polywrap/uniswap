import { PolywrapClient } from "@polywrap/client-js";
import path from "path";
import {
  createPool,
  encodeSqrtRatioX96,
  getTickAtSqrtRatio,
  nearestUsableTick,
  constant,
  feeAmountToTickSpacing, createTradeFromRoute, createTradeFromRoutes, createRoute, swapCallParameters,
  getFakeTestToken,
  ChainIdEnum, FeeAmountEnum, Pool, Token, Trade, TradeTypeEnum
} from "../helpers";

jest.setTimeout(120000);

const twoPow128: string = "340282366920938463463374607431768211456";

describe('SwapRouter (SDK test replication)', () => {

  const makePool = async (token0: Token, token1: Token) => {
    const feeAmount = FeeAmountEnum.MEDIUM;
    const liquidity = 1_000_000;
    const tickSpacing = await feeAmountToTickSpacing(client, fsUri, feeAmount);
    const tickIndex0 = await nearestUsableTick(client, fsUri, await constant<number>(client, fsUri, "MIN_TICK"), tickSpacing);
    const tickIndex1 = await nearestUsableTick(client, fsUri, await constant<number>(client, fsUri, "MAX_TICK"), tickSpacing);
    const sqrtRatioX96 = await encodeSqrtRatioX96(client, fsUri, 1, 1);
    const tickCurrent = await getTickAtSqrtRatio(client, fsUri, sqrtRatioX96);
    return createPool(client, fsUri, token0, token1, feeAmount, sqrtRatioX96, liquidity, tickCurrent, [
      {
        index: tickIndex0,
        liquidityNet: liquidity.toString(),
        liquidityGross: liquidity.toString()
      },
      {
        index: tickIndex1,
        liquidityNet: (-liquidity).toString(),
        liquidityGross: liquidity.toString()
      }
    ]);
  };

  const slippageTolerance = "0.01";
  const recipient = '0x0000000000000000000000000000000000000003';
  const deadline = 123;

  const ETHER: Token = {
    chainId: ChainIdEnum.MAINNET,
    address: "",
    currency: {
      decimals: 18,
      name: "Ether",
      symbol: "ETH",
    },
  };
  const WETH: Token = {
    chainId: ChainIdEnum.MAINNET,
    address: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    currency: {
      decimals: 18,
      symbol: "WETH",
      name: "Wrapped Ether",
    },
  };
  let token0: Token;
  let token1: Token;
  let token2: Token;
  let token3: Token;

  let pool_0_1: Pool;
  let pool_1_weth: Pool;
  let pool_0_2: Pool;
  let pool_0_3: Pool;
  let pool_2_3: Pool;
  let pool_3_weth: Pool;
  let pool_1_3: Pool;

  let client: PolywrapClient;
  let fsUri: string;

  beforeAll(async () => {
    // get client
    client = new PolywrapClient();
    // get uri
    const wrapperAbsPath: string = path.resolve(__dirname + "/../../../../");
    fsUri = "fs/" + wrapperAbsPath + '/build';
    // set up test case data
    token0 = getFakeTestToken(0);
    token1 = getFakeTestToken(1);
    token2 = getFakeTestToken(2);
    token3 = getFakeTestToken(3);
    pool_0_1 = await makePool(token0, token1);
    pool_1_weth = await makePool(token1, WETH);
    pool_0_2 = await makePool(token0, token2);
    pool_0_3 = await makePool(token0, token3);
    pool_2_3 = await makePool(token2, token3);
    pool_3_weth = await makePool(token3, WETH);
    pool_1_3 = await makePool(token3, token1);
  });

  describe('swapCallParameters', () => {
    describe('single trade input', () => {
      it('single-hop exact input', async () => {
        const trade: Trade = await createTradeFromRoute(
          client,
          fsUri,
          {
            route: await createRoute(client, fsUri, [pool_0_1], token0, token1),
            amount: {
              token: token0,
              amount: "100",
            },
          },
          TradeTypeEnum.EXACT_INPUT
        );
        const { calldata, value } = await swapCallParameters(client, fsUri, [trade], {
          slippageTolerance,
          recipient,
          deadline: deadline.toString()
        });

        expect(calldata).toBe(
          '0x414bf389000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000610000000000000000000000000000000000000000000000000000000000000000'
        );
        expect(value).toBe('0x00');
      });

      it('single-hop exact output', async () => {
        const trade: Trade = await createTradeFromRoute(
          client,
          fsUri,
          {
            route: await createRoute(client, fsUri, [pool_0_1], token0, token1),
            amount: {
              token: token1,
              amount: "100",
            },
          },
          TradeTypeEnum.EXACT_OUTPUT
        );
        const { calldata, value } = await swapCallParameters(client, fsUri, [trade], {
          slippageTolerance,
          recipient,
          deadline: deadline.toString()
        });

        expect(calldata).toBe(
          '0xdb3e2198000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000670000000000000000000000000000000000000000000000000000000000000000'
        );
        expect(value).toBe('0x00');
      });

      it('multi-hop exact input', async () => {
        const trade: Trade = await createTradeFromRoute(
          client,
          fsUri,
          {
            route: await createRoute(client, fsUri, [pool_0_1, pool_1_weth], token0, WETH),
            amount: {
              token: token0,
              amount: "100",
            },
          },
          TradeTypeEnum.EXACT_INPUT
        );
        const { calldata, value } = await swapCallParameters(client, fsUri, [trade], {
          slippageTolerance,
          recipient,
          deadline: deadline.toString()
        });

        expect(calldata).toBe(
          '0xc04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000005f00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000001000bb80000000000000000000000000000000000000002000bb8c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000'
        )
        expect(value).toBe('0x00')
      })

      it('multi-hop exact output', async () => {
        const trade: Trade = await createTradeFromRoute(
          client,
          fsUri,
          {
            route: await createRoute(client, fsUri, [pool_0_1, pool_1_weth], token0, WETH),
            amount: {
              token: WETH,
              amount: "100",
            },
          },
          TradeTypeEnum.EXACT_OUTPUT
        );
        const { calldata, value } = await swapCallParameters(client, fsUri, [trade], {
          slippageTolerance,
          recipient,
          deadline: deadline.toString()
        });

        expect(calldata).toBe(
          '0xf28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000690000000000000000000000000000000000000000000000000000000000000042c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000bb80000000000000000000000000000000000000002000bb80000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000'
        )
        expect(value).toBe('0x00')
      })

      it('ETH in exact input', async () => {
        const trade: Trade = await createTradeFromRoute(
          client,
          fsUri,
          {
            route: await createRoute(client, fsUri, [pool_1_weth], ETHER, token1),
            amount: {
              token: ETHER,
              amount: "100",
            },
          },
          TradeTypeEnum.EXACT_INPUT
        );
        const { calldata, value } = await swapCallParameters(client, fsUri, [trade], {
          slippageTolerance,
          recipient,
          deadline: deadline.toString()
        });

        expect(calldata).toBe(
          '0x414bf389000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000610000000000000000000000000000000000000000000000000000000000000000'
        )
        expect(value).toBe('0x64')
      })

      it('ETH in exact output', async () => {
        const trade: Trade = await createTradeFromRoute(
          client,
          fsUri,
          {
            route: await createRoute(client, fsUri, [pool_1_weth], ETHER, token1),
            amount: {
              token: token1,
              amount: "100",
            },
          },
          TradeTypeEnum.EXACT_OUTPUT
        );
        const { calldata, value } = await swapCallParameters(client, fsUri, [trade], {
          slippageTolerance,
          recipient,
          deadline: deadline.toString()
        });

        expect(calldata).toBe(
          '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000104db3e2198000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000067000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412210e8a00000000000000000000000000000000000000000000000000000000'
        )
        expect(value).toBe('0x67')
      })

      it('ETH out exact input', async () => {
        const trade: Trade = await createTradeFromRoute(
          client,
          fsUri,
          {
            route: await createRoute(client, fsUri, [pool_1_weth], token1, ETHER),
            amount: {
              token: token1,
              amount: "100",
            },
          },
          TradeTypeEnum.EXACT_INPUT
        );
        const { calldata, value } = await swapCallParameters(client, fsUri, [trade], {
          slippageTolerance,
          recipient,
          deadline: deadline.toString()
        });

        expect(calldata).toBe(
          '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000104414bf3890000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000061000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004449404b7c0000000000000000000000000000000000000000000000000000000000000061000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000'
        )
        expect(value).toBe('0x00')
      })

      it('ETH out exact output', async () => {
        const trade: Trade = await createTradeFromRoute(
          client,
          fsUri,
          {
            route: await createRoute(client, fsUri, [pool_1_weth], token1, ETHER),
            amount: {
              token: ETHER,
              amount: "100",
            },
          },
          TradeTypeEnum.EXACT_OUTPUT
        );
        const { calldata, value } = await swapCallParameters(client, fsUri, [trade], {
          slippageTolerance,
          recipient,
          deadline: deadline.toString()
        });

        expect(calldata).toBe(
          '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000104db3e21980000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000067000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004449404b7c0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000'
        )
        expect(value).toBe('0x00')
      })

      it('sqrtPriceLimitX96', async () => {
        const trade: Trade = await createTradeFromRoute(
          client,
          fsUri,
          {
            route: await createRoute(client, fsUri, [pool_0_1], token0, token1),
            amount: {
              token: token0,
              amount: "100",
            },
          },
          TradeTypeEnum.EXACT_INPUT
        );
        const { calldata, value } = await swapCallParameters(client, fsUri, [trade], {
          slippageTolerance,
          recipient,
          deadline: deadline.toString(),
          sqrtPriceLimitX96: twoPow128,
        });

        expect(calldata).toBe(
          '0x414bf389000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000610000000000000000000000000000000100000000000000000000000000000000'
        )
        expect(value).toBe('0x00')
      })

      it('fee with eth out', async () => {
        const trade: Trade = await createTradeFromRoute(
          client,
          fsUri,
          {
            route: await createRoute(client, fsUri, [pool_1_weth], token1, ETHER),
            amount: {
              token: token1,
              amount: "100",
            },
          },
          TradeTypeEnum.EXACT_INPUT
        );
        const { calldata, value } = await swapCallParameters(client, fsUri, [trade], {
          slippageTolerance,
          recipient,
          deadline: deadline.toString(),
          fee: {
            fee: "0.005",
            recipient
          }
        });

        expect(calldata).toBe(
          '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000104414bf3890000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000849b2c0a37000000000000000000000000000000000000000000000000000000000000006100000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000'
        )
        expect(value).toBe('0x00')
      })

      it('fee with eth in using exact output', async () => {
        const trade: Trade = await createTradeFromRoute(
          client,
          fsUri,
          {
            route: await createRoute(client, fsUri, [pool_1_weth], ETHER, token1),
            amount: {
              token: token1,
              amount: "10",
            },
          },
          TradeTypeEnum.EXACT_OUTPUT
        );
        const { calldata, value } = await swapCallParameters(client, fsUri, [trade], {
          slippageTolerance,
          recipient,
          deadline: deadline.toString(),
          fee: {
            fee: "0.005",
            recipient
          }
        });

        expect(calldata).toBe(
          '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000104db3e2198000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a4e0e189a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412210e8a00000000000000000000000000000000000000000000000000000000'
        )
        expect(value).toBe('0x0c')
      })

      it('fee', async () => {
        const trade: Trade = await createTradeFromRoute(
          client,
          fsUri,
          {
            route: await createRoute(client, fsUri, [pool_0_1], token0, token1),
            amount: {
              token: token0,
              amount: "100",
            },
          },
          TradeTypeEnum.EXACT_INPUT
        );
        const { calldata, value } = await swapCallParameters(client, fsUri, [trade], {
          slippageTolerance,
          recipient,
          deadline: deadline.toString(),
          fee: {
            fee: "0.005",
            recipient
          }
        });

        expect(calldata).toBe(
          '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000104414bf389000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a4e0e189a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000006100000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000'
        )
        expect(value).toBe('0x00')
      })
    })
  })

  describe('multiple trade input', () => {
    it('two single-hop exact input', async () => {
      const trade1: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_0_1], token0, token1),
          amount: {
            token: token0,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_INPUT
      );
      const trade2: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_0_1], token0, token1),
          amount: {
            token: token0,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_INPUT
      );
      const { calldata, value } = await swapCallParameters(client, fsUri, [trade1, trade2], {
        slippageTolerance,
        recipient,
        deadline: deadline.toString(),
      });

      expect(calldata).toBe(
        '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000104414bf389000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104414bf389000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000061000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
      )
      expect(value).toBe('0x00')
    })

    it('one single-hop one multi-hop exact input', async () => {
      const trade1: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_0_3], token0, token3),
          amount: {
            token: token0,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_INPUT
      );
      const trade2: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_0_2, pool_2_3], token0, token3),
          amount: {
            token: token0,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_INPUT
      );
      const { calldata, value } = await swapCallParameters(client, fsUri, [trade1, trade2], {
        slippageTolerance,
        recipient,
        deadline: deadline.toString(),
      });

      expect(calldata).toBe(
        '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000104414bf389000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000005f00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000001000bb80000000000000000000000000000000000000003000bb8000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
      )
      expect(value).toBe('0x00')
    })

    it('two multi-hop exact input', async () => {
      const trade1: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_0_1, pool_1_3], token0, token3),
          amount: {
            token: token0,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_INPUT
      );
      const trade2: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_0_2, pool_2_3], token0, token3),
          amount: {
            token: token0,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_INPUT
      );
      const { calldata, value } = await swapCallParameters(client, fsUri, [trade1, trade2], {
        slippageTolerance,
        recipient,
        deadline: deadline.toString(),
      });

      expect(calldata).toBe(
        '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000144c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000005f00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000001000bb80000000000000000000000000000000000000002000bb80000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000005f00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000001000bb80000000000000000000000000000000000000003000bb8000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
      )
      expect(value).toBe('0x00')
    })

    it('ETH in exact input', async () => {
      const trade1: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_1_weth, pool_1_3], ETHER, token3),
          amount: {
            token: ETHER,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_INPUT
      );
      const trade2: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_3_weth], ETHER, token3),
          amount: {
            token: ETHER,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_INPUT
      );
      const { calldata, value } = await swapCallParameters(client, fsUri, [trade1, trade2], {
        slippageTolerance,
        recipient,
        deadline: deadline.toString(),
      });

      expect(calldata).toBe(
        '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000144c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000005f0000000000000000000000000000000000000000000000000000000000000042c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000bb80000000000000000000000000000000000000002000bb80000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104414bf389000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000061000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
      )
      expect(value).toBe('0xc8')
    })

    it('ETH in exact output', async () => {
      const trade1: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_1_weth, pool_1_3], ETHER, token3),
          amount: {
            token: token3,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_OUTPUT
      );
      const trade2: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_3_weth], ETHER, token3),
          amount: {
            token: token3,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_OUTPUT
      );
      const { calldata, value } = await swapCallParameters(client, fsUri, [trade1, trade2], {
        slippageTolerance,
        recipient,
        deadline: deadline.toString(),
      });

      expect(calldata).toBe(
        '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000144f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006900000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000004000bb80000000000000000000000000000000000000002000bb8c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104db3e2198000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000067000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412210e8a00000000000000000000000000000000000000000000000000000000'
      )
      expect(value).toBe('0xd0')
    })

    it('ETH out exact input', async () => {
      const trade1: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_1_3, pool_1_weth], token3, ETHER),
          amount: {
            token: token3,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_INPUT
      );
      const trade2: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_3_weth], token3, ETHER),
          amount: {
            token: token3,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_INPUT
      );
      const { calldata, value } = await swapCallParameters(client, fsUri, [trade1, trade2], {
        slippageTolerance,
        recipient,
        deadline: deadline.toString(),
      });

      expect(calldata).toBe(
        '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000144c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000005f00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000004000bb80000000000000000000000000000000000000002000bb8c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104414bf3890000000000000000000000000000000000000000000000000000000000000004000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000061000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004449404b7c00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000'
      )
      expect(value).toBe('0x00')
    })

    it('ETH out exact output', async () => {
      const trade1: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_1_3, pool_1_weth], token3, ETHER),
          amount: {
            token: ETHER,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_OUTPUT
      );
      const trade2: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_3_weth], token3, ETHER),
          amount: {
            token: ETHER,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_OUTPUT
      );
      const { calldata, value } = await swapCallParameters(client, fsUri, [trade1, trade2], {
        slippageTolerance,
        recipient,
        deadline: deadline.toString(),
      });

      expect(calldata).toBe(
        '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000144f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000690000000000000000000000000000000000000000000000000000000000000042c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000bb80000000000000000000000000000000000000002000bb80000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104db3e21980000000000000000000000000000000000000000000000000000000000000004000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000067000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004449404b7c00000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000'
      )
      expect(value).toBe('0x00')
    })

    it('two single-hop exact output', async () => {
      const trade1: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_0_1], token0, token1),
          amount: {
            token: token1,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_OUTPUT
      );
      const trade2: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_0_1], token0, token1),
          amount: {
            token: token1,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_OUTPUT
      );
      const { calldata, value } = await swapCallParameters(client, fsUri, [trade1, trade2], {
        slippageTolerance,
        recipient,
        deadline: deadline.toString(),
      });

      expect(calldata).toBe(
        '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000104db3e2198000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104db3e2198000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000067000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
      )
      expect(value).toBe('0x00')
    })

    it('one single-hop one multi-hop exact output', async () => {
      const trade1: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_0_3], token0, token3),
          amount: {
            token: token3,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_OUTPUT
      );
      const trade2: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_0_2, pool_2_3], token0, token3),
          amount: {
            token: token3,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_OUTPUT
      );
      const { calldata, value } = await swapCallParameters(client, fsUri, [trade1, trade2], {
        slippageTolerance,
        recipient,
        deadline: deadline.toString(),
      });

      expect(calldata).toBe(
        '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000104db3e2198000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006900000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000004000bb80000000000000000000000000000000000000003000bb8000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
      )
      expect(value).toBe('0x00')
    })

    it('two multi-hop exact output', async () => {
      const trade1: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_0_1, pool_1_3], token0, token3),
          amount: {
            token: token3,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_OUTPUT
      );
      const trade2: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_0_2, pool_2_3], token0, token3),
          amount: {
            token: token3,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_OUTPUT
      );
      const { calldata, value } = await swapCallParameters(client, fsUri, [trade1, trade2], {
        slippageTolerance,
        recipient,
        deadline: deadline.toString(),
      });

      expect(calldata).toBe(
        '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000144f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006900000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000004000bb80000000000000000000000000000000000000002000bb80000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006900000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000004000bb80000000000000000000000000000000000000003000bb8000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
      )
      expect(value).toBe('0x00')
    })

    it('different token in fails ', async () => {
      const trade1: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_2_3], token2, token3),
          amount: {
            token: token2,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_INPUT
      );
      const trade2: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_0_1], token0, token1),
          amount: {
            token: token0,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_INPUT
      );

      await expect(() =>
        swapCallParameters(client, fsUri, [trade1, trade2], {
          slippageTolerance,
          recipient,
          deadline: deadline.toString(),
        })
      ).rejects.toThrow("TOKEN_IN_DIFF: the input token of the trades must match")
    })

    it('different token out fails ', async () => {
      const trade1: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_0_3], token0, token3),
          amount: {
            token: token0,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_INPUT
      );
      const trade2: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_0_1, pool_1_weth], token0, WETH),
          amount: {
            token: token0,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_INPUT
      );

      await expect(() =>
        swapCallParameters(client, fsUri, [trade1, trade2], {
          slippageTolerance,
          recipient,
          deadline: deadline.toString(),
        })
      ).rejects.toThrow("TOKEN_OUT_DIFF: the output token of the trades must match")
    })

    it('sqrtPriceLimitX96', async () => {
      const trade1: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_0_1], token0, token1),
          amount: {
            token: token0,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_INPUT
      );
      const trade2: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_0_1], token0, token1),
          amount: {
            token: token0,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_INPUT
      );
      const { calldata, value } = await swapCallParameters(client, fsUri, [trade1, trade2], {
        slippageTolerance,
        recipient,
        deadline: deadline.toString(),
        sqrtPriceLimitX96: twoPow128,
      });

      expect(calldata).toBe(
        '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000104414bf389000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000610000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104414bf389000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000061000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
      )
      expect(value).toBe('0x00')
    })

    it('fee with eth out', async () => {
      const trade1: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_1_3, pool_1_weth], token3, ETHER),
          amount: {
            token: token3,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_INPUT
      );
      const trade2: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_3_weth], token3, ETHER),
          amount: {
            token: token3,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_INPUT
      );
      const { calldata, value } = await swapCallParameters(client, fsUri, [trade1, trade2], {
        slippageTolerance,
        recipient,
        deadline: deadline.toString(),
        fee: {
          fee: "0.005",
          recipient
        }
      });

      expect(calldata).toBe(
        '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000144c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000005f00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000004000bb80000000000000000000000000000000000000002000bb8c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104414bf3890000000000000000000000000000000000000000000000000000000000000004000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000849b2c0a3700000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000'
      )
      expect(value).toBe('0x00')
    })

    it('fee with eth in using exact output', async () => {
      const trade1: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_1_weth, pool_1_3], ETHER, token3),
          amount: {
            token: token3,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_OUTPUT
      );
      const trade2: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_3_weth], ETHER, token3),
          amount: {
            token: token3,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_OUTPUT
      );
      const { calldata, value } = await swapCallParameters(client, fsUri, [trade1, trade2], {
        slippageTolerance,
        recipient,
        deadline: deadline.toString(),
        fee: {
          fee: "0.005",
          recipient
        }
      });

      expect(calldata).toBe(
        '0xac9650d80000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000004200000000000000000000000000000000000000000000000000000000000000144f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006900000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000004000bb80000000000000000000000000000000000000002000bb8c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104db3e2198000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a4e0e189a0000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000c800000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412210e8a00000000000000000000000000000000000000000000000000000000'
      )
      expect(value).toBe('0xd0')
    })

    it('fee', async () => {
      const trade1: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_0_1, pool_1_3], token0, token3),
          amount: {
            token: token0,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_INPUT
      );
      const trade2: Trade = await createTradeFromRoute(
        client,
        fsUri,
        {
          route: await createRoute(client, fsUri, [pool_0_2, pool_2_3], token0, token3),
          amount: {
            token: token0,
            amount: "100",
          },
        },
        TradeTypeEnum.EXACT_INPUT
      );
      const { calldata, value } = await swapCallParameters(client, fsUri, [trade1, trade2], {
        slippageTolerance,
        recipient,
        deadline: deadline.toString(),
        fee: {
          fee: "0.005",
          recipient
        }
      });

      expect(calldata).toBe(
        '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003600000000000000000000000000000000000000000000000000000000000000144c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000005f00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000001000bb80000000000000000000000000000000000000002000bb80000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000005f00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000001000bb80000000000000000000000000000000000000003000bb800000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a4e0e189a0000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000be00000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000'
      )
      expect(value).toBe('0x00')
    })
  })

  describe('trade with multiple routes', () => {
    it('one single-hop one multi-hop exact input', async () => {
      const trade: Trade = await createTradeFromRoutes(
        client,
        fsUri,
        [{
          route: await createRoute(client, fsUri, [pool_0_3], token0, token3),
          amount: {
            token: token0,
            amount: "100",
          },
        },
        {
          route: await createRoute(client, fsUri, [pool_0_2, pool_2_3], token0, token3),
          amount: {
            token: token0,
            amount: "100",
          },
        }],
        TradeTypeEnum.EXACT_INPUT
      );
      const { calldata, value } = await swapCallParameters(client, fsUri, [trade], {
        slippageTolerance,
        recipient,
        deadline: deadline.toString(),
      });

      expect(calldata).toBe(
        '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000104414bf389000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000005f00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000001000bb80000000000000000000000000000000000000003000bb8000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
      )
      expect(value).toBe('0x00')
    })

    it('two multi-hop exact input', async () => {
      const trade: Trade = await createTradeFromRoutes(
        client,
        fsUri,
        [{
          route: await createRoute(client, fsUri, [pool_0_1, pool_1_3], token0, token3),
          amount: {
            token: token0,
            amount: "100",
          },
        },
          {
            route: await createRoute(client, fsUri, [pool_0_2, pool_2_3], token0, token3),
            amount: {
              token: token0,
              amount: "100",
            },
          }],
        TradeTypeEnum.EXACT_INPUT
      );
      const { calldata, value } = await swapCallParameters(client, fsUri, [trade], {
        slippageTolerance,
        recipient,
        deadline: deadline.toString(),
      });

      expect(calldata).toBe(
        '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000144c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000005f00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000001000bb80000000000000000000000000000000000000002000bb80000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000005f00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000001000bb80000000000000000000000000000000000000003000bb8000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
      )
      expect(value).toBe('0x00')
    })

    it('ETH in exact input', async () => {
      const trade: Trade = await createTradeFromRoutes(
        client,
        fsUri,
        [{
          route: await createRoute(client, fsUri, [pool_1_weth, pool_1_3], ETHER, token3),
          amount: {
            token: ETHER,
            amount: "100",
          },
        },
          {
            route: await createRoute(client, fsUri, [pool_3_weth], ETHER, token3),
            amount: {
              token: ETHER,
              amount: "100",
            },
          }],
        TradeTypeEnum.EXACT_INPUT
      );
      const { calldata, value } = await swapCallParameters(client, fsUri, [trade], {
        slippageTolerance,
        recipient,
        deadline: deadline.toString(),
      });

      expect(calldata).toBe(
        '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000144c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000005f0000000000000000000000000000000000000000000000000000000000000042c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000bb80000000000000000000000000000000000000002000bb80000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104414bf389000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000061000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
      )
      expect(value).toBe('0xc8')
    })

    it('ETH in exact output', async () => {
      const trade: Trade = await createTradeFromRoutes(
        client,
        fsUri,
        [{
          route: await createRoute(client, fsUri, [pool_1_weth, pool_1_3], ETHER, token3),
          amount: {
            token: token3,
            amount: "100",
          },
        },
          {
            route: await createRoute(client, fsUri, [pool_3_weth], ETHER, token3),
            amount: {
              token: token3,
              amount: "100",
            },
          }],
        TradeTypeEnum.EXACT_OUTPUT
      );
      const { calldata, value } = await swapCallParameters(client, fsUri, [trade], {
        slippageTolerance,
        recipient,
        deadline: deadline.toString(),
      });

      expect(calldata).toBe(
        '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000144f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006900000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000004000bb80000000000000000000000000000000000000002000bb8c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104db3e2198000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000067000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412210e8a00000000000000000000000000000000000000000000000000000000'
      )
      expect(value).toBe('0xd0')
    })

    it('ETH out exact input', async () => {
      const trade: Trade = await createTradeFromRoutes(
        client,
        fsUri,
        [{
          route: await createRoute(client, fsUri, [pool_1_3, pool_1_weth], token3, ETHER),
          amount: {
            token: token3,
            amount: "100",
          },
        },
          {
            route: await createRoute(client, fsUri, [pool_3_weth], token3, ETHER),
            amount: {
              token: token3,
              amount: "100",
            },
          }],
        TradeTypeEnum.EXACT_INPUT
      );
      const { calldata, value } = await swapCallParameters(client, fsUri, [trade], {
        slippageTolerance,
        recipient,
        deadline: deadline.toString(),
      });

      expect(calldata).toBe(
        '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000144c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000005f00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000004000bb80000000000000000000000000000000000000002000bb8c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104414bf3890000000000000000000000000000000000000000000000000000000000000004000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000061000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004449404b7c00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000'
      )
      expect(value).toBe('0x00')
    })

    it('ETH out exact output', async () => {
      const trade: Trade = await createTradeFromRoutes(
        client,
        fsUri,
        [{
          route: await createRoute(client, fsUri, [pool_1_3, pool_1_weth], token3, ETHER),
          amount: {
            token: ETHER,
            amount: "100",
          },
        },
          {
            route: await createRoute(client, fsUri, [pool_3_weth], token3, ETHER),
            amount: {
              token: ETHER,
              amount: "100",
            },
          }],
        TradeTypeEnum.EXACT_OUTPUT
      );
      const { calldata, value } = await swapCallParameters(client, fsUri, [trade], {
        slippageTolerance,
        recipient,
        deadline: deadline.toString(),
      });

      expect(calldata).toBe(
        '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000144f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000690000000000000000000000000000000000000000000000000000000000000042c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000bb80000000000000000000000000000000000000002000bb80000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104db3e21980000000000000000000000000000000000000000000000000000000000000004000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000067000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004449404b7c00000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000'
      )
      expect(value).toBe('0x00')
    })

    it('one single-hop one multi-hop exact output', async () => {
      const trade: Trade = await createTradeFromRoutes(
        client,
        fsUri,
        [{
          route: await createRoute(client, fsUri, [pool_0_3], token0, token3),
          amount: {
            token: token3,
            amount: "100",
          },
        },
          {
            route: await createRoute(client, fsUri, [pool_0_2, pool_2_3], token0, token3),
            amount: {
              token: token3,
              amount: "100",
            },
          }],
        TradeTypeEnum.EXACT_OUTPUT
      );
      const { calldata, value } = await swapCallParameters(client, fsUri, [trade], {
        slippageTolerance,
        recipient,
        deadline: deadline.toString(),
      });

      expect(calldata).toBe(
        '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000104db3e2198000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006900000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000004000bb80000000000000000000000000000000000000003000bb8000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
      )
      expect(value).toBe('0x00')
    })

    it('two multi-hop exact output', async () => {
      const trade: Trade = await createTradeFromRoutes(
        client,
        fsUri,
        [{
          route: await createRoute(client, fsUri, [pool_0_1, pool_1_3], token0, token3),
          amount: {
            token: token3,
            amount: "100",
          },
        },
          {
            route: await createRoute(client, fsUri, [pool_0_2, pool_2_3], token0, token3),
            amount: {
              token: token3,
              amount: "100",
            },
          }],
        TradeTypeEnum.EXACT_OUTPUT
      );
      const { calldata, value } = await swapCallParameters(client, fsUri, [trade], {
        slippageTolerance,
        recipient,
        deadline: deadline.toString(),
      });

      expect(calldata).toBe(
        '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000144f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006900000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000004000bb80000000000000000000000000000000000000002000bb80000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144f28c0498000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006900000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000004000bb80000000000000000000000000000000000000003000bb8000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
      )
      expect(value).toBe('0x00')
    })
  })
})