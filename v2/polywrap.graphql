#import { Module, TxResponse, StaticTxResult } into Ethereum from "wrapscan.io/polywrap/ethers@1.0"
#import { Module } into SHA3 from "wrapscan.io/polywrap/sha3@1.0"

type Module {
    swap (
        tokenIn: Token!
        tokenOut: Token!
        amount: BigInt!
        tradeType: TradeType!
        tradeOptions: TradeOptions!
        txOverrides: TxOverrides
    ): Ethereum_TxResponse!

    exec(
        trade: Trade!
        tradeOptions: TradeOptions!
        txOverrides: TxOverrides
    ): Ethereum_TxResponse!

    execCall(
        parameters: SwapParameters!
        chainId: ChainId!
        txOverrides: TxOverrides
    ): Ethereum_TxResponse!

    approve(
        token: Token!
        amount: BigInt
        txOverrides: TxOverrides
    ): Ethereum_TxResponse!

    # Token
    currencyEquals(
        currency: Currency!
        other: Currency!
    ): Boolean!

    tokenEquals(
        token: Token!
        other: Token!
    ): Boolean!

    tokenAmountEquals(
        tokenAmount0: TokenAmount!
        tokenAmount1: TokenAmount!
    ): Boolean!

    tokenSortsBefore(
        token: Token!
        other: Token!
    ): Boolean!

    # Pair
    pairAddress(
        token0: Token!
        token1: Token!
    ): String!

    pairLiquidityToken(
        pair: Pair!
    ): Token!

    pairReserves(
        pair: Pair!
    ): [TokenAmount!]!

    pairToken0Price(
        pair: Pair!
    ): String!

    pairToken1Price(
        pair: Pair!
    ): String!

    pairOutputAmount(
        pair: Pair!
        inputAmount: TokenAmount!
    ): TokenAmount!

    pairOutputNextPair(
        pair: Pair!
        inputAmount: TokenAmount!
    ): Pair!

    pairInputAmount(
        pair: Pair!
        outputAmount: TokenAmount!
    ): TokenAmount!

    pairInputNextPair(
        pair: Pair!
        outputAmount: TokenAmount!
    ): Pair!

    pairLiquidityMinted(
        pair: Pair!
        totalSupply: TokenAmount!
        tokenAmount0: TokenAmount!
        tokenAmount1: TokenAmount!
    ): TokenAmount

    pairLiquidityValue(
        pair: Pair!
        totalSupply: TokenAmount!
        liquidity: TokenAmount!
        feeOn: Boolean
        kLast: BigInt
    ): [TokenAmount!]!

    # Route
    createRoute(
        pairs: [Pair!]!
        input: Token!
        output: Token
    ): Route!

    routePath(
        pairs: [Pair!]!
        input: Token!
    ): [Token!]!

    routeMidPrice(
        route: Route!
    ): String!

    # Router
    swapCallParameters(
        trade: Trade!,
        tradeOptions: TradeOptions!
    ): SwapParameters!

    estimateGas(
        parameters: SwapParameters!
        chainId: ChainId
    ): BigInt!

    execCallStatic(
        parameters: SwapParameters!
        chainId: ChainId!
        txOverrides: TxOverrides
    ): Ethereum_StaticTxResult!

    # Trade
    createTrade(
        route: Route!
        amount: TokenAmount!
        tradeType: TradeType!
    ): Trade!

    tradeExecutionPrice(
        trade: Trade!
    ): String!

    tradeNextMidPrice(
        trade: Trade!
    ): String!

    tradeSlippage(
        trade: Trade!
    ): String!

    tradeMinimumAmountOut(
        trade: Trade!
        slippageTolerance: String! # Float32!
    ): TokenAmount!

    tradeMaximumAmountIn(
        trade: Trade!
        slippageTolerance: String! # Float32!
    ): TokenAmount!

    bestTradeExactIn(
        pairs: [Pair!]!
        amountIn: TokenAmount!
        tokenOut: Token!
        options: BestTradeOptions
    ): [Trade!]!

    bestTradeExactOut(
        pairs: [Pair!]!
        tokenIn: Token!
        amountOut: TokenAmount!
        options: BestTradeOptions
    ): [Trade!]!

    # Fetch
    fetchTokenData(
        chainId: ChainId!
        address: String!
        symbol: String
        name: String
    ): Token!

    fetchPairData(
        token0: Token!
        token1: Token!
    ): Pair!

    fetchTotalSupply(
        token: Token!
    ): TokenAmount!

    fetchKLast(
        token: Token!
    ): BigInt!
}

enum ChainId {
    MAINNET
    ROPSTEN
    RINKEBY
    GOERLI
    KOVAN
}

enum TradeType {
    EXACT_INPUT
    EXACT_OUTPUT
}

enum Rounding {
    ROUND_DOWN
    ROUND_HALF_UP
    ROUND_UP
}

type TradeOptions {
    allowedSlippage: String!
    recipient: String!
    unixTimestamp: UInt32!
    ttl: UInt32
    deadline: UInt32
    feeOnTransfer: Boolean
}

type Token {
    chainId: ChainId!
    address: String!
    currency: Currency!
}

type Currency {
    decimals: UInt8!
    symbol: String
    name: String
}

type TokenAmount {
    token: Token!
    amount: BigInt!
}

type Pair {
    tokenAmount0: TokenAmount!
    tokenAmount1: TokenAmount!
}

type Route {
    path: [Token!]!
    pairs: [Pair!]!
    input: Token!
    output: Token!
}

type Trade {
    route: Route!
    inputAmount: TokenAmount!
    outputAmount: TokenAmount!
    tradeType: TradeType!
}

type BestTradeOptions {
    maxNumResults: UInt32
    maxHops: UInt32
}

type SwapParameters {
    methodName: String!
    args: [String!]!
    value: String!
}

type TxOverrides {
    gasPrice: BigInt
    gasLimit: BigInt
}